parameters:
  configuration: Debug
  buildNumber: $(Build.BuildId)
  sourceprojects: '[Ss]rc/*/*.csproj'
  testprojects: '[Tt]est/*/*.csproj'
  verbosityRestore: normal
  runtimeId: any
  selfContained: false
  enableCodeCoverage: false
  artifactPrefix: $(Build.Repository.Name)
steps:
- script: |
    echo '##vso[task.setvariable variable=CommonArguments]--configuration ${{ parameters.configuration }} -p:BuildNumber=${{ parameters.buildNumber }}'
    echo '##vso[task.setvariable variable=RuntimeArguments]--runtime "${{ parameters.runtimeId }}"'
    echo '##vso[task.setvariable variable=CodeCoverage]--collect "Code coverage"'
  displayName: Set variables
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: |
      ${{ parameters.sourceprojects }}
      ${{ parameters.testprojects }}
    verbosityRestore: ${{ parameters.verbosityRestore }}
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: ${{ parameters.sourceprojects }}
    ${{ if parameters.selfContained }}:
      arguments: $(CommonArguments) $(RuntimeArguments)
    ${{ if not(parameters.selfContained) }}:
      arguments: $(CommonArguments)
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: ${{ parameters.testprojects }}
    ${{ if parameters.enableCodeCoverage }}:
      arguments: $(CommonArguments) $(CodeCoverage)
    ${{ if not(parameters.enableCodeCoverage) }}:
      arguments: $(CommonArguments)
    publishTestResults: true
- task: DotNetCoreCLI@2
  displayName: Publish
  condition: ${{ not(parameters.selfContained) }}
  inputs:
    command: publish
    projects: ${{ parameters.sourceprojects }}
    arguments: $(CommonArguments) --output $(Build.ArtifactStagingDirectory)/$(BuildConfiguration) -p:BuildDefaultTargetFramework=true
    publishWebProjects: false
    zipAfterPublish: false
  continueOnError: true
- task: DotNetCoreCLI@2
  displayName: Publish (Self-Contained)
  condition: ${{ parameters.selfContained }}
  inputs:
    command: publish
    projects: ${{ parameters.sourceprojects }}
    arguments: $(CommonArguments) --self-contained --output $(Build.ArtifactStagingDirectory)/$(BuildConfiguration) -p:BuildDefaultTargetFramework=true
    publishWebProjects: false
    zipAfterPublish: false
  continueOnError: true
- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: ${{ format('{0}-{1}-{2}-{3}', parameters.artifactPrefix, parameters.runtimeId, variables['Build.BuildId'], parameters.buildNumber) }}
  continueOnError: true
